{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["quoteQuery","App","useState","quote","setQuote","author","setAuthor","setRandomNumber","quotesArray","setQuotesArray","fetchQuotes","url","a","fetch","response","json","parsedJSON","quotes","useEffect","className","id","onClick","randomInteger","Math","floor","length","random","getRandomQuote","href","encodeURI","icon","faTwitter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAKIA,EACF,yIAsDaC,MApDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAG2BJ,mBAAS,GAHpC,mBAGQK,GAHR,aAIyBL,mBAAS,MAJlC,mBAINM,EAJM,KAIOC,EAJP,KAMPC,EAAW,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAEOA,EAASC,OAFhB,OAEZC,EAFY,OAGlBP,EAAeO,EAAWC,QAHR,2CAAH,sDAsBjB,OAhBAC,qBAAU,WACRR,EAAYV,KACX,CAACA,IAeF,qBAAKmB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,sBAAKC,GAAG,YAAR,UACE,uBACA,oBAAGA,GAAG,OAAN,cAAejB,EAAf,OACA,oBAAGiB,GAAG,SAAN,eAAkBf,KAClB,wBAAQe,GAAG,YAAYC,QAAS,kBAdjB,WACrB,IAAIC,EAAgBC,KAAKC,MAAMhB,EAAYiB,OAASF,KAAKG,UACzDnB,EAAgBe,GAChBlB,EAASI,EAAYc,GAAenB,OACpCG,EAAUE,EAAYc,GAAejB,QAUOsB,IAAtC,qCAGA,mBACEP,GAAG,cACHQ,KAAMC,UAAU,4CAAD,OAC+B1B,EAD/B,cAC0CE,IAH3D,SAME,cAAC,IAAD,CAAiByB,KAAMC,gBCxCpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b0b1f187.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nlet quoteQuery =\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [randomNumber, setRandomNumber] = useState(0);\n  const [quotesArray, setQuotesArray] = useState(null);\n\n  const fetchQuotes = async url => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArray(parsedJSON.quotes);\n  };\n\n  useEffect(() => {\n    fetchQuotes(quoteQuery);\n  }, [quoteQuery]);\n\n  const generateRandomNumber = () => {\n    let randomInt = Math.floor();\n    setRandomNumber(randomInt);\n  };\n\n  const getRandomQuote = () => {\n    let randomInteger = Math.floor(quotesArray.length * Math.random());\n    setRandomNumber(randomInteger);\n    setQuote(quotesArray[randomInteger].quote);\n    setAuthor(quotesArray[randomInteger].author);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div id=\"quote-box\">\n          <h1></h1>\n          <p id=\"text\">\"{quote}\"</p>\n          <p id=\"author\">- {author}</p>\n          <button id=\"new-quote\" onClick={() => getRandomQuote()}>\n            Generate A Random Quote\n          </button>\n          <a\n            id=\"tweet-quote\"\n            href={encodeURI(\n              `http://www.twitter.com/intent/tweet?text=${quote} - ${author}`\n            )}\n          >\n            <FontAwesomeIcon icon={faTwitter}></FontAwesomeIcon>\n          </a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}